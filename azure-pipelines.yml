# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: "Build stage"
    jobs:
      - job: Build
        displayName: "Build job"
        container: maven:3.9.11-eclipse-temurin-17-noble
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: "pom.xml"
              goals: "clean package"
              publishJUnitResults: true
              testResultsFiles: "**/surefire-reports/TEST-*.xml"
              mavenVersionOption: "Default"
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              sqMavenPluginVersionChoice: "latest"
              checkStyleRunAnalysis: false
              pmdRunAnalysis: false
              spotBugsRunAnalysis: false

          - task: CopyFiles@2
            displayName: "Copy Files to artifact staging directory"
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)"
              Contents: "**/target/*.jar"
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: demo

  - stage: Deploy
    displayName: "Deploy to Production"
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeployWebApp
        displayName: "Deploy Web App"
        environment: "spring-hello-vsc-pf2128373"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy to Azure Web App"
                  inputs:
                    azureSubscription: "dd446115-c219-489b-a479-f4a0aab6a74d"
                    appType: "webAppLinux"
                    appName: "spring-hello-vsc-pf2128373"
                    package: "$(Pipeline.Workspace)/demo/target/*.jar"
